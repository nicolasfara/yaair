name: CI/CD Pipeline

on:
  workflow_call:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: "-Dwarnings"

jobs:
  check:
    name: 🧪 Check, Format, Clippy, Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: 📦 Build
        run: cargo build --workspace --all-targets

      - name: 🧹 Format check
        run: cargo fmt --all -- --check

      - name: 🧐 Clippy
        run: cargo clippy --workspace --all-targets

      - name: 📚 Docs check
        run: cargo doc --workspace --no-deps --document-private-items

  test:
    name: 🧪 Test Matrix
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta, nightly]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --workspace --all-targets

  coverage:
    name: 📈 Coverage (grcov)
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: llvm-tools-preview

      - name: Install grcov
        run: cargo install grcov

      - name: Run tests with coverage
        env:
          CARGO_INCREMENTAL: 0
          RUSTFLAGS: "-Cinstrument-coverage"
          LLVM_PROFILE_FILE: "coverage-%p-%m.profraw"
        run: |
          cargo build
          cargo test
          grcov . \
            --source-dir . \
            --binary-path ./target/debug/ \
            --output-types lcov \
            --llvm \
            --branch \
            --ignore-not-existing \
            --ignore "/*" \
            --ignore "*/target/*" \
            --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1
        with:
          files: lcov.info
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  deny:
    name: 🚫 Dependency Audit (cargo-deny)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install cargo-deny
        run: cargo install cargo-deny

      - name: Run cargo-deny
        run: cargo deny check

  release:
    name: 🚀 Release
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [check, test, deny]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

#      - name: Create GitHub Release
#        uses: softprops/action-gh-release@v2
#        if: startsWith(github.event.head_commit.message, 'release:')
#        with:
#          tag_name: ${{ github.sha }}
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  success:
    runs-on: ubuntu-latest
    needs: [check, test, coverage, deny, release]
    if: >-
      ${{
        always() && (
          contains(join(needs.*.result, ','), 'failure')
          || !contains(join(needs.*.result, ','), 'cancelled')
        )
      }}
    steps:
      - name: Verify that there were no failures
        run: ${{ !contains(join(needs.*.result, ','), 'failure') }}